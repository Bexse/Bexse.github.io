
'use strict';
//Question #1

// function maxOfThree(num1, num2, num3){
//     let max = 0;
//     if ((num1 >= num2) && (num1 >= num3)){
//        max = num1
//     }
//     else if((num2 >= num1) && (num2 >= num3)){
//         max = num2;
//     }
//     else{
//         max = num3;
//     }
  
//    return max;

// }

// function sum (arr){
//     let sum = 0;
//     for (let i = 0; i < arr.length; i++){
//         sum+= arr[i];
//     }

// return sum;
// }


// function multiply (arr){
//     let multiple = 1;
//     for (let i = 0; i < arr.length; i++){
//         multiple*= arr[i];
//     }
    
//     return multiple;
// }


// function findLongestWord(arr){
//     let longestWord = arr[o];

//     for (let i = 0; i< arr.length; i++){

//         if(arr[i].lentgth > longestWord.strength) {
//             longestWord = arr[i].lentgth;
//         }
        
//     }

//     return longestWord;
// }

//  function reverseArray(arr){
// let newArray = [];
// for (let i = arr.length -1; i > -1; i--){
//     newArray.push(arr[i]);
// }
//    return newArray;
// }


// function reverseArrayInPlace(arr){

    // let arr = [1, 2, 3, 4, 5, 6, 7];
    // let n = arr.length-1;
    
    // for(let i=0; i<=n/2; i++) {
    //   let temp = arr[i];
    //   arr[i] = arr[n-i];
    //   arr[n-i] = temp;
    // }
    // console.log(arr)
//     return arr;
// }

// function sumDimension (matrix){
//     let sum = 0;
//     for (let i = 0; i < matrix.length; i++){
//         for (let j = 0; j < matrix[i].length; j++) {

//         sum += (matrix[i][j]); 
        
//         }

//     }
    
// return sum;
// }

// let consolee = [[1,2,3], [4,5,6], [1,2]];
// 

function scoreExam(b, c) {
let score = [];
for (let i = 0; i < b.length; i++){
     let count = 0;
    for (let j = 0, k =0;  j < b[i].length; j++, k++ ){
          if(b[i][j] === c[k] ) {
            count++;
            continue;
        }

    }
score.push(count);

}
return score;
}
console.log(scoreExam ([[1,1, 2,4], [2, 1, 2, 2], [3,1, 3,4]], [3,1, 2, 4]));
